"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Smile, Search } from "lucide-react";

interface EmojiPickerProps {
  onEmojiSelect: (emoji: string) => void;
  trigger?: React.ReactNode;
}

const emojiCategories = {
  recent: {
    name: "Recent",
    emojis: ["üòÄ", "üòÇ", "‚ù§Ô∏è", "üëç", "üëé", "üò¢", "üòÆ", "üò°"],
  },
  smileys: {
    name: "Smileys & People",
    emojis: [
      "üòÄ",
      "üòÉ",
      "üòÑ",
      "üòÅ",
      "üòÜ",
      "üòÖ",
      "üòÇ",
      "ü§£",
      "üòä",
      "üòá",
      "üôÇ",
      "üôÉ",
      "üòâ",
      "üòå",
      "üòç",
      "ü•∞",
      "üòò",
      "üòó",
      "üòô",
      "üòö",
      "üòã",
      "üòõ",
      "üòù",
      "üòú",
      "ü§™",
      "ü§®",
      "üßê",
      "ü§ì",
      "üòé",
      "ü§©",
      "ü•≥",
      "üòè",
      "üòí",
      "üòû",
      "üòî",
      "üòü",
      "üòï",
      "üôÅ",
      "‚òπÔ∏è",
      "üò£",
      "üòñ",
      "üò´",
      "üò©",
      "ü•∫",
      "üò¢",
      "üò≠",
      "üò§",
      "üò†",
      "üò°",
      "ü§¨",
      "ü§Ø",
      "üò≥",
      "ü•µ",
      "ü•∂",
      "üò±",
      "üò®",
      "üò∞",
      "üò•",
      "üòì",
      "ü§ó",
      "ü§î",
      "ü§≠",
      "ü§´",
      "ü§•",
      "üò∂",
      "üòê",
      "üòë",
      "üò¨",
      "üôÑ",
      "üòØ",
      "üò¶",
      "üòß",
      "üòÆ",
      "üò≤",
      "ü•±",
      "üò¥",
      "ü§§",
      "üò™",
      "üòµ",
      "ü§ê",
      "ü•¥",
      "ü§¢",
      "ü§Æ",
      "ü§ß",
      "üò∑",
      "ü§í",
      "ü§ï",
    ],
  },
  gestures: {
    name: "Gestures",
    emojis: [
      "üëç",
      "üëé",
      "üëå",
      "ü§å",
      "ü§è",
      "‚úåÔ∏è",
      "ü§û",
      "ü§ü",
      "ü§ò",
      "ü§ô",
      "üëà",
      "üëâ",
      "üëÜ",
      "üñï",
      "üëá",
      "‚òùÔ∏è",
      "üëã",
      "ü§ö",
      "üñêÔ∏è",
      "‚úã",
      "üññ",
      "üëè",
      "üôå",
      "ü§ù",
      "üôè",
      "‚úçÔ∏è",
      "üí™",
      "ü¶æ",
      "ü¶ø",
      "ü¶µ",
      "ü¶∂",
    ],
  },
  hearts: {
    name: "Hearts",
    emojis: [
      "‚ù§Ô∏è",
      "üß°",
      "üíõ",
      "üíö",
      "üíô",
      "üíú",
      "üñ§",
      "ü§ç",
      "ü§é",
      "üíî",
      "‚ù£Ô∏è",
      "üíï",
      "üíû",
      "üíì",
      "üíó",
      "üíñ",
      "üíò",
      "üíù",
      "üíü",
    ],
  },
  objects: {
    name: "Objects",
    emojis: [
      "üéâ",
      "üéä",
      "üéà",
      "üéÅ",
      "üèÜ",
      "ü•á",
      "ü•à",
      "ü•â",
      "‚≠ê",
      "üåü",
      "üí´",
      "‚ú®",
      "üî•",
      "üíØ",
      "üí¢",
      "üí•",
      "üí¶",
      "üí®",
      "üï≥Ô∏è",
      "üí¨",
      "üëÅÔ∏è‚Äçüó®Ô∏è",
      "üó®Ô∏è",
      "üóØÔ∏è",
      "üí≠",
      "üí§",
    ],
  },
};

export function EmojiPicker({ onEmojiSelect, trigger }: EmojiPickerProps) {
  const [searchQuery, setSearchQuery] = useState("");
  const [open, setOpen] = useState(false);

  const filteredEmojis = Object.entries(emojiCategories).reduce(
    (acc, [key, category]) => {
      if (!searchQuery) return acc;

      const filtered = category.emojis.filter((emoji) => {
        // Simple search - you could enhance this with emoji names/keywords
        return emoji.includes(searchQuery);
      });

      if (filtered.length > 0) {
        acc[key as keyof typeof emojiCategories] = {
          ...category,
          emojis: filtered,
        };
      }

      return acc;
    },
    {} as typeof emojiCategories
  );

  const handleEmojiClick = (emoji: string) => {
    onEmojiSelect(emoji);
    setOpen(false);
  };

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        {trigger || (
          <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
            <Smile className="h-4 w-4" />
          </Button>
        )}
      </PopoverTrigger>
      <PopoverContent className="w-80 p-0" align="end">
        <div className="p-3 border-b">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
            <Input
              placeholder="Search emojis..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-9 h-8"
            />
          </div>
        </div>

        <Tabs defaultValue="recent" className="w-full">
          <TabsList className="grid w-full grid-cols-5 h-8">
            <TabsTrigger value="recent" className="text-xs">
              Recent
            </TabsTrigger>
            <TabsTrigger value="smileys" className="text-xs">
              üòÄ
            </TabsTrigger>
            <TabsTrigger value="gestures" className="text-xs">
              üëç
            </TabsTrigger>
            <TabsTrigger value="hearts" className="text-xs">
              ‚ù§Ô∏è
            </TabsTrigger>
            <TabsTrigger value="objects" className="text-xs">
              üéâ
            </TabsTrigger>
          </TabsList>

          <ScrollArea className="h-64">
            {searchQuery ? (
              <div className="p-3">
                <div className="grid grid-cols-8 gap-1">
                  {Object.values(filteredEmojis)
                    .flatMap((category) => category.emojis)
                    .map((emoji, index) => (
                      <Button
                        key={index}
                        variant="ghost"
                        size="sm"
                        className="h-8 w-8 p-0 text-lg hover:bg-accent"
                        onClick={() => handleEmojiClick(emoji)}
                      >
                        {emoji}
                      </Button>
                    ))}
                </div>
              </div>
            ) : (
              Object.entries(emojiCategories).map(([key, category]) => (
                <TabsContent key={key} value={key} className="p-3 mt-0">
                  <div className="grid grid-cols-8 gap-1">
                    {category.emojis.map((emoji, index) => (
                      <Button
                        key={index}
                        variant="ghost"
                        size="sm"
                        className="h-8 w-8 p-0 text-lg hover:bg-accent"
                        onClick={() => handleEmojiClick(emoji)}
                      >
                        {emoji}
                      </Button>
                    ))}
                  </div>
                </TabsContent>
              ))
            )}
          </ScrollArea>
        </Tabs>
      </PopoverContent>
    </Popover>
  );
}
